# install_requirements.py - Script de instala√ß√£o das depend√™ncias
"""
Script para instalar todas as depend√™ncias necess√°rias para o sistema de voz
Execute este arquivo primeiro antes de usar os m√≥dulos
"""

import subprocess
import sys
import os

def install_package(package):
    """Instala um pacote usando pip"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        print(f"‚úì {package} instalado com sucesso")
        return True
    except subprocess.CalledProcessError:
        print(f"‚úó Erro ao instalar {package}")
        return False

def check_system_requirements():
    """Verifica requisitos do sistema"""
    print("Verificando requisitos do sistema...")
    
    # Verificar Python
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 7):
        print("‚úó Python 3.7+ √© necess√°rio")
        return False
    else:
        print(f"‚úì Python {python_version.major}.{python_version.minor}")
    
    # Verificar sistema operacional
    import platform
    system = platform.system()
    print(f"‚úì Sistema operacional: {system}")
    
    if system == "Linux":
        print("Nota: No Linux, voc√™ pode precisar instalar:")
        print("  sudo apt-get install portaudio19-dev python3-pyaudio")
        print("  sudo apt-get install espeak espeak-data")
    
    return True

def install_all_requirements():
    """Instala todas as depend√™ncias necess√°rias"""
    
    print("=== INSTALA√á√ÉO DO SISTEMA DE VOZ BRASILEIRO ===\n")
    
    if not check_system_requirements():
        return False
    
    # Lista de pacotes necess√°rios
    packages = [
        "pyttsx3",           # S√≠ntese de voz
        "SpeechRecognition", # Reconhecimento de voz
        "pyaudio",          # Interface de √°udio
        "requests",         # Para requisi√ß√µes HTTP (usado pelo SpeechRecognition)
    ]
    
    print(f"\nInstalando {len(packages)} pacotes necess√°rios...\n")
    
    success_count = 0
    for package in packages:
        if install_package(package):
            success_count += 1
        print()
    
    print(f"Instala√ß√£o conclu√≠da: {success_count}/{len(packages)} pacotes instalados com sucesso")
    
    if success_count == len(packages):
        print("\n‚úì Todas as depend√™ncias foram instaladas com sucesso!")
        print("\nPr√≥ximos passos:")
        print("1. Execute 'python voice_manager.py' para testar o sistema")
        print("2. Configure vozes brasileiras no seu sistema operacional")
        print("3. Teste o microfone e ajuste as configura√ß√µes se necess√°rio")
        return True
    else:
        print(f"\n‚úó {len(packages) - success_count} pacotes falharam na instala√ß√£o")
        print("Verifique os erros acima e tente instalar manualmente")
        return False

def create_requirements_txt():
    """Cria arquivo requirements.txt"""
    requirements_content = """# Sistema de Voz Brasileiro - Depend√™ncias
# Instale com: pip install -r requirements.txt

pyttsx3>=2.90
SpeechRecognition>=3.10.0
pyaudio>=0.2.11
requests>=2.25.1
"""
    
    try:
        with open("requirements.txt", "w", encoding="utf-8") as f:
            f.write(requirements_content)
        print("‚úì Arquivo requirements.txt criado")
        return True
    except Exception as e:
        print(f"‚úó Erro ao criar requirements.txt: {e}")
        return False

def test_installation():
    """Testa se as instala√ß√µes funcionaram"""
    print("\nTestando instala√ß√£o...")
    
    modules_to_test = [
        ("pyttsx3", "S√≠ntese de voz"),
        ("speech_recognition", "Reconhecimento de voz"),
        ("pyaudio", "Interface de √°udio"),
    ]
    
    all_working = True
    for module, description in modules_to_test:
        try:
            __import__(module)
            print(f"‚úì {description} - OK")
        except ImportError as e:
            print(f"‚úó {description} - ERRO: {e}")
            all_working = False
    
    if all_working:
        print("\n‚úì Todos os m√≥dulos foram instalados corretamente!")
        
        # Teste b√°sico do TTS
        try:
            import pyttsx3
            engine = pyttsx3.init()
            print("‚úì Engine de s√≠ntese de voz inicializada")
            engine.stop()
        except Exception as e:
            print(f"‚ö† Aviso: Problema com engine de voz: {e}")
        
        # Teste b√°sico do microfone
        try:
            import speech_recognition as sr
            r = sr.Recognizer()
            mic = sr.Microphone()
            print("‚úì Microfone inicializado")
        except Exception as e:
            print(f"‚ö† Aviso: Problema com microfone: {e}")
            
    else:
        print("\n‚úó Alguns m√≥dulos n√£o foram instalados corretamente")
        print("Tente instalar manualmente os m√≥dulos com erro")
    
    return all_working

def show_configuration_tips():
    """Mostra dicas de configura√ß√£o"""
    print("\n=== DICAS DE CONFIGURA√á√ÉO ===")
    
    import platform
    system = platform.system()
    
    if system == "Windows":
        print("\nWindows:")
        print("‚Ä¢ Vozes brasileiras est√£o dispon√≠veis em 'Configura√ß√µes > Hora e idioma > Fala'")
        print("‚Ä¢ Instale 'Microsoft Speech Platform' para mais vozes")
        print("‚Ä¢ Verifique se o microfone est√° habilitado nas configura√ß√µes de privacidade")
        
    elif system == "macOS":
        print("\nmacOS:")
        print("‚Ä¢ V√° em 'Prefer√™ncias do Sistema > Acessibilidade > Fala'")
        print("‚Ä¢ Baixe vozes em portugu√™s em 'Voz do sistema'")
        print("‚Ä¢ Verifique permiss√µes do microfone em 'Seguran√ßa e Privacidade'")
        
    elif system == "Linux":
        print("\nLinux:")
        print("‚Ä¢ Instale vozes do espeak: sudo apt-get install espeak-data")
        print("‚Ä¢ Para vozes melhores: sudo apt-get install festival festvox-kallpc16k")
        print("‚Ä¢ Teste microfone: arecord -d 5 test.wav && aplay test.wav")
    
    print("\nDicas gerais:")
    print("‚Ä¢ Use um microfone de boa qualidade para melhor reconhecimento")
    print("‚Ä¢ Fale claramente e n√£o muito r√°pido")
    print("‚Ä¢ Execute em ambiente com pouco ru√≠do de fundo")
    print("‚Ä¢ Teste os comandos b√°sicos antes de adicionar comandos personalizados")

def create_example_script():
    """Cria script de exemplo"""
    example_content = '''#!/usr/bin/env python3
# exemplo_uso.py - Exemplo de uso do sistema de voz

"""
Exemplo b√°sico de como usar o sistema de voz brasileiro
Execute este arquivo ap√≥s instalar as depend√™ncias
"""

import time
from voice_manager import VoiceManager

def main():
    # Criar inst√¢ncia do gerenciador
    voice = VoiceManager()
    
    # Saudar usu√°rio
    voice.speak("Ol√°! Sistema de voz brasileiro inicializado.")
    
    # Definir comandos personalizados
    def apresentar_sistema():
        voice.speak("Este √© um sistema de reconhecimento e s√≠ntese de voz em portugu√™s brasileiro.")
        voice.speak("Voc√™ pode dizer comandos como: ol√°, que horas s√£o, volume alto, ou parar.")
    
    def contar_regressiva():
        voice.speak("Iniciando contagem regressiva")
        for i in range(5, 0, -1):
            voice.speak(str(i))
            time.sleep(1)
        voice.speak("Zero! Contagem conclu√≠da.")
    
    def informacoes_sistema():
        commands = voice.get_available_commands()
        voice.speak(f"Tenho {len(commands)} comandos dispon√≠veis.")
        voice.speak("Diga 'comandos' para ouvir todos.")
    
    # Registrar comandos
    voice.register_command("apresentar", apresentar_sistema)
    voice.register_command("apresenta√ß√£o", apresentar_sistema)
    voice.register_command("contagem", contar_regressiva)
    voice.register_command("informa√ß√µes", informacoes_sistema)
    voice.register_command("info", informacoes_sistema)
    
    # Iniciar sistema
    try:
        voice.start_listening()
        
        # Manter ativo at√© ser interrompido
        print("Sistema ativo. Pressione Ctrl+C para encerrar.")
        while voice.is_listening:
            time.sleep(0.1)
            
    except KeyboardInterrupt:
        print("\\nEncerrando...")
        voice.stop_listening()

if __name__ == "__main__":
    main()
'''
    
    try:
        with open("exemplo_uso.py", "w", encoding="utf-8") as f:
            f.write(example_content)
        print("‚úì Arquivo exemplo_uso.py criado")
        return True
    except Exception as e:
        print(f"‚úó Erro ao criar exemplo_uso.py: {e}")
        return False

def main():
    """Fun√ß√£o principal do instalador"""
    print("Iniciando instala√ß√£o do Sistema de Voz Brasileiro...")
    
    # Instalar depend√™ncias
    if not install_all_requirements():
        print("\nInstala√ß√£o falhou. Verifique os erros acima.")
        return
    
    # Criar arquivos auxiliares
    create_requirements_txt()
    create_example_script()
    
    # Testar instala√ß√£o
    if test_installation():
        show_configuration_tips()
        
        print("\n" + "="*50)
        print("üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO! üéâ")
        print("="*50)
        print("\nArquivos criados:")
        print("‚Ä¢ voice_manager.py - M√≥dulo principal")
        print("‚Ä¢ text_to_speech.py - S√≠ntese de voz")
        print("‚Ä¢ speech_recognition_br.py - Reconhecimento de voz")
        print("‚Ä¢ requirements.txt - Lista de depend√™ncias")
        print("‚Ä¢ exemplo_uso.py - Exemplo de uso")
        print("\nPara come√ßar:")
        print("python exemplo_uso.py")
        
    else:
        print("\n‚ùå Instala√ß√£o completada com problemas")
        print("Verifique as mensagens de erro acima")

if __name__ == "__main__":
    main()