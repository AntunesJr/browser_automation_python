#!/usr/bin/env python3
"""
Script de verifica√ß√£o p√≥s-instala√ß√£o
Testa se todas as depend√™ncias est√£o funcionando corretamente
"""

import sys
import subprocess
import time
import tempfile
import shutil
from pathlib import Path

def print_header(title):
    print(f"\n{'='*60}")
    print(f"üß™ {title}")
    print('='*60)

def test_python_imports():
    """Testa todas as importa√ß√µes Python necess√°rias"""
    print("\nüì¶ Testando importa√ß√µes Python...")
    
    imports_to_test = [
        ("playwright", "Playwright base"),
        ("playwright.sync_api", "Playwright Sync API"),
        ("pynput", "PyNput base"), 
        ("pynput.mouse", "PyNput Mouse"),
        ("pynput.keyboard", "PyNput Keyboard"),
        ("cryptography", "Cryptography"),
        ("cryptography.fernet", "Cryptography Fernet"),
        ("requests", "Requests"),
        ("psutil", "PSUtil"),
        ("threading", "Threading"),
        ("subprocess", "Subprocess"),
        ("pathlib", "PathLib"),
        ("json", "JSON"),
        ("time", "Time"),
        ("os", "OS"),
        ("sys", "Sys")
    ]
    
    success_count = 0
    failed_imports = []
    
    for module_name, display_name in imports_to_test:
        try:
            __import__(module_name)
            print(f"   ‚úÖ {display_name}")
            success_count += 1
        except ImportError as e:
            print(f"   ‚ùå {display_name}: {e}")
            failed_imports.append((module_name, str(e)))
    
    print(f"\n   üìä Resultado: {success_count}/{len(imports_to_test)} importa√ß√µes bem-sucedidas")
    
    if failed_imports:
        print("\n   ‚ùå Importa√ß√µes falharam:")
        for module, error in failed_imports:
            print(f"      ‚Ä¢ {module}: {error}")
    
    return len(failed_imports) == 0

def test_chrome_installation():
    """Testa se o Chrome est√° instalado e funcionando"""
    print("\nüåê Testando instala√ß√£o do Google Chrome...")
    
    chrome_commands = [
        "google-chrome-stable",
        "google-chrome",
        "/usr/bin/google-chrome-stable", 
        "/usr/bin/google-chrome",
        "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
    ]
    
    working_commands = []
    
    for cmd in chrome_commands:
        try:
            result = subprocess.run(
                [cmd, "--version"], 
                capture_output=True, 
                text=True, 
                timeout=5
            )
            if result.returncode == 0:
                version = result.stdout.strip()
                print(f"   ‚úÖ {cmd}: {version}")
                working_commands.append(cmd)
        except (FileNotFoundError, subprocess.TimeoutExpired, subprocess.CalledProcessError):
            continue
    
    if working_commands:
        print(f"\n   üìä {len(working_commands)} comando(s) Chrome funcionando")
        return True, working_commands[0]
    else:
        print("   ‚ùå Nenhum comando Chrome encontrado")
        return False, None

def test_chrome_debug_mode(chrome_cmd):
    """Testa se o Chrome pode ser iniciado em modo debug"""
    print("\nüîß Testando Chrome em modo debug...")
    
    if not chrome_cmd:
        print("   ‚ùå Comando Chrome n√£o dispon√≠vel")
        return False
    
    # Cria diret√≥rio tempor√°rio
    temp_dir = tempfile.mkdtemp(prefix="chrome-test-")
    test_port = 9225  # Porta diferente para n√£o conflitar
    
    try:
        print(f"   üöÄ Iniciando Chrome na porta {test_port}...")
        
        # Inicia Chrome
        proc = subprocess.Popen([
            chrome_cmd,
            f"--remote-debugging-port={test_port}",
            f"--user-data-dir={temp_dir}",
            "--headless",
            "--no-sandbox",
            "--disable-gpu",
            "--disable-dev-shm-usage"
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        # Aguarda inicializa√ß√£o
        print("   ‚è≥ Aguardando inicializa√ß√£o...")
        time.sleep(4)
        
        # Testa conex√£o CDP
        try:
            import requests
            response = requests.get(f"http://localhost:{test_port}/json", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ CDP funcionando - {len(data)} p√°ginas detectadas")
                success = True
            else:
                print(f"   ‚ùå CDP retornou status {response.status_code}")
                success = False
                
        except Exception as e:
            print(f"   ‚ùå Erro ao conectar via CDP: {e}")
            success = False
        
        # Mata processo
        try:
            proc.terminate()
            proc.wait(timeout=5)
        except subprocess.TimeoutExpired:
            proc.kill()
        
        return success
        
    except Exception as e:
        print(f"   ‚ùå Erro ao iniciar Chrome: {e}")
        return False
    
    finally:
        # Cleanup
        try:
            shutil.rmtree(temp_dir, ignore_errors=True)
        except:
            pass

def test_playwright_installation():
    """Testa se o Playwright est√° instalado corretamente"""
    print("\nüé≠ Testando Playwright...")
    
    try:
        from playwright.sync_api import sync_playwright
        print("   ‚úÖ Playwright sync_api importado")
        
        # Testa se consegue iniciar (sem conectar a nada)
        with sync_playwright() as p:
            print("   ‚úÖ Playwright context criado")
            
            # Verifica browsers dispon√≠veis
            browsers = []
            try:
                chromium = p.chromium
                browsers.append("chromium")
            except:
                pass
            
            try:
                firefox = p.firefox
                browsers.append("firefox")
            except:
                pass
            
            print(f"   ‚úÖ Browsers dispon√≠veis: {', '.join(browsers) if browsers else 'Nenhum'}")
            
            if not browsers:
                print("   ‚ö†Ô∏è Nenhum browser Playwright encontrado")
                print("   üí° Execute: python -m playwright install")
                return False
            
            return True
            
    except ImportError as e:
        print(f"   ‚ùå Erro ao importar Playwright: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro no Playwright: {e}")
        return False

def test_playwright_cdp_integration(chrome_cmd):
    """Testa integra√ß√£o Playwright + Chrome CDP"""
    print("\nüîó Testando integra√ß√£o Playwright + Chrome CDP...")
    
    if not chrome_cmd:
        print("   ‚ùå Chrome n√£o dispon√≠vel")
        return False
    
    temp_dir = tempfile.mkdtemp(prefix="playwright-cdp-test-")
    test_port = 9226
    
    chrome_proc = None
    try:
        # Inicia Chrome
        print("   üöÄ Iniciando Chrome para CDP...")
        chrome_proc = subprocess.Popen([
            chrome_cmd,
            f"--remote-debugging-port={test_port}",
            f"--user-data-dir={temp_dir}",
            "--headless",
            "--no-sandbox"
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        time.sleep(3)
        
        # Testa Playwright
        print("   üé≠ Conectando Playwright via CDP...")
        from playwright.sync_api import sync_playwright
        
        with sync_playwright() as p:
            browser = p.chromium.connect_over_cdp(f"http://localhost:{test_port}")
            
            # Cria contexto e p√°gina
            if browser.contexts:
                context = browser.contexts[0]
            else:
                context = browser.new_context()
            
            page = context.new_page()
            
            # Navega para p√°gina teste
            test_html = "data:text/html,<html><head><title>Teste CDP</title></head><body><h1>Sucesso!</h1></body></html>"
            page.goto(test_html)
            
            # Verifica resultado
            title = page.title()
            content = page.locator("h1").inner_text()
            
            print(f"   ‚úÖ P√°gina carregada - T√≠tulo: '{title}'")
            print(f"   ‚úÖ Conte√∫do: '{content}'")
            
            # Testa JavaScript
            js_result = page.evaluate("() => navigator.userAgent")
            print(f"   ‚úÖ JavaScript executado - UserAgent detectado")
            
            browser.close()
            
            return True
    
    except Exception as e:
        print(f"   ‚ùå Erro na integra√ß√£o: {e}")
        return False
    
    finally:
        # Cleanup
        if chrome_proc:
            try:
                chrome_proc.terminate()
                chrome_proc.wait(timeout=5)
            except:
                chrome_proc.kill()
        
        try:
            shutil.rmtree(temp_dir, ignore_errors=True)
        except:
            pass

def test_credentials_system():
    """Testa o sistema de credenciais"""
    print("\nüîê Testando sistema de credenciais...")
    
    try:
        # Adiciona diret√≥rio atual ao path
        current_dir = Path.cwd()
        if str(current_dir) not in sys.path:
            sys.path.insert(0, str(current_dir))
        
        # Tenta importar m√≥dulos
        from credentials.credentials import Credentials
        from credentials.message.msg_code import MsgCode
        from credentials.message.msg_handler import MessageHandler
        print("   ‚úÖ M√≥dulos de credenciais importados")
        
        # Testa cria√ß√£o de inst√¢ncia
        creds = Credentials()
        print("   ‚úÖ Inst√¢ncia Credentials criada")
        
        # Testa verifica√ß√£o b√°sica (sem criar arquivos)
        try:
            status = creds.checker()
            print(f"   ‚úÖ M√©todo checker executado (retornou: {type(status)})")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro no checker (esperado se n√£o houver credenciais): {e}")
        
        # Testa MessageHandler
        try:
            msg = MessageHandler.get(0)  # C√≥digo de sucesso
            print(f"   ‚úÖ MessageHandler funcionando: '{msg}'")
        except Exception as e:
            print(f"   ‚ùå Erro no MessageHandler: {e}")
            return False
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Erro de importa√ß√£o: {e}")
        print("   üí° Verifique se os m√≥dulos credentials est√£o no diret√≥rio")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro geral: {e}")
        return False

def test_mouse_control():
    """Testa controle b√°sico do mouse"""
    print("\nüñ±Ô∏è Testando controle do mouse...")
    
    try:
        from pynput import mouse
        from pynput.mouse import Button, Listener
        print("   ‚úÖ PyNput mouse importado")
        
        # Testa detec√ß√£o de posi√ß√£o
        current_pos = mouse.position
        print(f"   ‚úÖ Posi√ß√£o atual do mouse: {current_pos}")
        
        # Testa tipos de bot√£o dispon√≠veis
        buttons = [Button.left, Button.right, Button.middle]
        
        # Verifica bot√µes especiais se dispon√≠veis
        try:
            buttons.extend([Button.button8, Button.button9])
        except AttributeError:
            pass
        
        print(f"   ‚úÖ Bot√µes detectados: {[str(b).replace('Button.', '') for b in buttons]}")
        
        # Testa cria√ß√£o de listener (sem iniciar)
        def dummy_click(x, y, button, pressed):
            pass
        
        listener = Listener(on_click=dummy_click)
        print("   ‚úÖ Mouse listener criado (n√£o iniciado)")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Erro ao importar pynput: {e}")
        print("   üí° Instale com: pip install pynput")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro no teste mouse: {e}")
        return False

def test_project_structure():
    """Verifica estrutura do projeto"""
    print("\nüìÅ Verificando estrutura do projeto...")
    
    required_files = [
        "main.py",
        "browser/browser_cdp.py",
        "browser/__init__.py",
        "credentials/credentials.py",
        "credentials/__init__.py",
        "credentials/message/msg_code.py",
        "credentials/message/msg_handler.py"
    ]
    
    optional_files = [
        "requirements.txt",
        "custom_setup.py",
        "start_chrome_debug.sh"
    ]
    
    missing_required = []
    missing_optional = []
    
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path}")
            missing_required.append(file_path)
    
    for file_path in optional_files:
        if Path(file_path).exists():
            print(f"   ‚úì {file_path}")
        else:
            print(f"   - {file_path} (opcional)")
            missing_optional.append(file_path)
    
    if missing_required:
        print(f"\n   ‚ùå Arquivos obrigat√≥rios faltando: {len(missing_required)}")
        for file in missing_required:
            print(f"      ‚Ä¢ {file}")
        return False
    else:
        print(f"\n   ‚úÖ Todos os arquivos obrigat√≥rios presentes")
        return True

def run_comprehensive_test():
    """Executa todos os testes"""
    print_header("VERIFICA√á√ÉO COMPLETA DA INSTALA√á√ÉO")
    
    tests = [
        ("Importa√ß√µes Python", test_python_imports),
        ("Instala√ß√£o Chrome", test_chrome_installation),
        ("Playwright", test_playwright_installation),
        ("Sistema de Credenciais", test_credentials_system),
        ("Controle Mouse", test_mouse_control),
        ("Estrutura Projeto", test_project_structure)
    ]
    
    results = {}
    chrome_cmd = None
    
    # Executa testes b√°sicos
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        try:
            result = test_func()
            if isinstance(result, tuple):
                success, extra = result
                if test_name == "Instala√ß√£o Chrome":
                    chrome_cmd = extra
                results[test_name] = success
            else:
                results[test_name] = result
        except Exception as e:
            print(f"   ‚ùå Erro inesperado: {e}")
            results[test_name] = False
    
    # Testes que dependem do Chrome
    if chrome_cmd:
        advanced_tests = [
            ("Chrome Debug Mode", lambda: test_chrome_debug_mode(chrome_cmd)),
            ("Playwright + CDP", lambda: test_playwright_cdp_integration(chrome_cmd))
        ]
        
        for test_name, test_func in advanced_tests:
            print(f"\n--- {test_name} ---")
            try:
                results[test_name] = test_func()
            except Exception as e:
                print(f"   ‚ùå Erro inesperado: {e}")
                results[test_name] = False
    
    # Relat√≥rio final
    print_header("RELAT√ìRIO FINAL")
    
    passed_tests = []
    failed_tests = []
    
    for test_name, success in results.items():
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        print(f"   {status} {test_name}")
        
        if success:
            passed_tests.append(test_name)
        else:
            failed_tests.append(test_name)
    
    print(f"\nüìä ESTAT√çSTICAS:")
    print(f"   ‚úÖ Passaram: {len(passed_tests)}")
    print(f"   ‚ùå Falharam: {len(failed_tests)}")
    print(f"   üìà Taxa de sucesso: {len(passed_tests)/len(results)*100:.1f}%")
    
    if len(passed_tests) >= len(results) * 0.8:  # 80% ou mais
        print("\nüéâ INSTALA√á√ÉO APROVADA!")
        print("‚úÖ Seu ambiente est√° pronto para usar o sistema")
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("   1. Execute: ./start_chrome_debug.sh")
        print("   2. Execute: python main.py")
        print("   3. Use os comandos de mouse configurados")
    else:
        print("\n‚ö†Ô∏è INSTALA√á√ÉO PRECISA DE AJUSTES")
        print("‚ùå Alguns componentes n√£o est√£o funcionando")
        print("\nüîß PROBLEMAS DETECTADOS:")
        for test in failed_tests:
            print(f"   ‚Ä¢ {test}")
        print("\nüí° SOLU√á√ïES:")
        print("   ‚Ä¢ Execute novamente: python custom_setup.py")
        print("   ‚Ä¢ Verifique as mensagens de erro acima")
        print("   ‚Ä¢ Instale depend√™ncias manualmente se necess√°rio")

if __name__ == "__main__":
    try:
        run_comprehensive_test()
    except KeyboardInterrupt:
        print("\n\nüõë Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico durante teste: {e}")
        sys.exit(1)